#!/usr/bin/env python


# Copyright (C) 2019, Simone Scrima <simonescrima@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program. If not, see <http://www.gnu.org/licenses/>.


import sys
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
import argparse
import numpy as np
import seaborn as sns
from LipidDyn.core import *
from collections import OrderedDict
sns.set()





def plotting(data,xlab,ylab,title,out,s):

    """
    Parameters
    ----------
    df : pandas dataframe
            dataframe with apl data 
    xlab : str
            string containing the x axis label
    ylab : str 
            string containing the x axis label
    title : str 
            string containing the title
    out : str 
            string containing the output filename
    s : str 
            string containing the name of the op metric

    """

    df = pd.read_csv(data)
    df.columns= df.columns.str.rstrip()

    if s == 'sch':
        if not ylab:
            ylab = '$S_{CH}$'

        for sn in ['sn1','sn2']:
            df1 = df[df['OP_name'].str.contains(sn)] # split in sn1 and sn2            
            sn_x = df1['atom2'].str[1:-1] # extract the x axis
            sn_y = df1['OP_mean'] # extract the y axis

            plt.plot(sn_x,-sn_y,antialiased=True,marker='_')
        plt.xticks(rotation=45, fontsize=6)
        plt.yticks(fontsize=6)
        plt.xlabel(xlab)
        plt.ylabel(ylab)
        plt.title(title)
        plt.legend(('Sn1', 'Sn2'), loc='upper right', shadow=True)
        plt.savefig(out,dpi = 300)

    if s == 'scc':
        if not ylab:
            ylab = '$S_{CC}$'

        for sn in ['sn1','sn2']:
            df1 = df[df['OP_name'].str.contains(sn)]
            sn_x = df1['atom1'].str[0::]+"_"+df1['atom2'].str[0::]
            sn_y = df1['OP_mean']
            plt.plot(sn_x, sn_y, antialiased=True, marker='_')
        plt.xticks(fontsize=8)
        plt.yticks(fontsize=8)
        plt.xlabel(xlab, fontsize=8)  # rotate xlab
        plt.ylabel(ylab, fontsize=8)  
        plt.title(title)
        plt.legend(('Sn1', 'Sn2'), loc='upper right', shadow=True, prop={'size':7})
        plt.savefig(out,dpi = 300)           
            




usage = ('ordpar -i ["".csv] -xlab [xlabel] -ylab [xlabel]' \
         '-t [Title of the plot] -o ["".png/pdf] -s [str]')

description='This script is to plot the average values of '\
             'order parameter per C atom in the lipid tail.'\
             'The input file is a .csv file coming from the'\
             'analysis '
                                    

parser = argparse.ArgumentParser(usage = usage,description= description)

parser.add_argument('-i',
                    '--input',
                    dest='input',
                    type=str,
                    required=True,
                    metavar='',
                    help='.csv file of the order parameter',
                    )

parser.add_argument('-xlab',
                    '--xlabel',
                    dest='xlabel',
                    type=str,
                    default='Carbon atoms',
                    required=False,
                    metavar='',
                    help='xlabel to assign to the plot',
                    )

parser.add_argument('-ylab',
                    '--ylabel',
                    dest='ylabel',
                    type=str,
                    required=False,
                    metavar='',
                    help='ylabel to assign to the plot',
                    )

parser.add_argument('-t',
                    '--title',
                    dest='title',
                    type=str,
                    required=False,
                    default='Order parameter',
                    metavar='',
                    help='Title to assign to the plot',
                    )

parser.add_argument('-out',
                    '--output',
                    dest='output',
                    type=str,
                    required=False,
                    metavar='',
                    default= 'Order_parameter',
                    help='output name of the file',
                    )

parser.add_argument('-s',
                    '--op-metric',
                    dest='op_metric',
                    type=str,
                    required=True,
                    help='str to specify which OP to plot (scc/sch)')

args = parser.parse_args()

data = args.input
xlab = args.xlabel
ylab = args.ylabel
out = args.output
title = args.title
s = args.op_metric


plotting(data,xlab,ylab,title,out,s)
