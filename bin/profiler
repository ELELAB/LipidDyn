#!/usr/bin/env python


# Copyright (C) 2019, Simone Scrima <simonescrima@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program. If not, see <http://www.gnu.org/licenses/>.


import sys
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
import argparse
import seaborn as sns
from LipidDyn.core import *
from collections import OrderedDict
sns.set()




def profiler(data,
             xlab,
             ylab,
             title,
             out,
             dist):

    """
    Parameters
    ----------
    df : pandas dataframe
            dataframe with apl data 
    xlab : str
            string containing the x axis label
    ylab : str 
            string containing the x axis label
    title : str 
            string containing the title
    out : str 
            string containing the output filename
    
    dist: str
            string containing the output distribution filename
    """

    fig = plt.figure(figsize=(7,10))
   
    axs = fig.subplots(nrows=3, 
                       ncols=2,
                       gridspec_kw={'width_ratios':[4,1]}, 
                       sharey=True,
                       sharex="col")


    palette = sns.color_palette('husl', 3)
    legend = OrderedDict()



    # upper leaflet lineplot 
    up = axs[0][0].plot(data["Time"],
                      data["Upper_Leaflet"], 
                      color=palette[0],
                      linewidth=0.5)
    
    # upper leaflet distribution plot
    sns.distplot(data["Upper_Leaflet"],
                 bins=20,
                 vertical=True,
                 ax=axs[0][1], 
                 kde=True,
                 color=palette[0], 
                 hist=True,
                 )
    
    
    
    # lower leaflet lineplot
    low = axs[1][0].plot(data["Time"],
                       data["Lower_Leaflet"], 
                       color=palette[1],
                       linewidth=0.5)
    
    # lower leaflet distribution plot
    sns.distplot(data["Lower_Leaflet"],
                 bins=20,
                 vertical=True, 
                 ax=axs[1][1], 
                 kde=True,
                 color=palette[1], 
                 hist=True,
                 )
                 
    
    
    
    # membrane lineplot 
    memb = axs[2][0].plot(data["Time"],
                        data["Membrane"], 
                        color=palette[2],
                        linewidth=0.5)
    
    # membrane distribution plot
    sns.distplot(data["Membrane"],
                 bins=20,                
                 vertical=True, 
                 ax=axs[2][1], 
                 kde=True,
                 color=palette[2],
                 hist=True,
                 )
    
   
    
    # set legend 
    axs[0][0].legend(up,labels=('Upper Leaflet',), fontsize=7)
    axs[1][0].legend(up,labels=('Lower Leaflet',),fontsize=7)
    axs[2][0].legend(up,labels=('Membrane',),fontsize=7)

    # set y-axis labels
    axs[0][0].set_ylabel(ylab)
    axs[1][0].set_ylabel(ylab)
    axs[2][0].set_ylabel(ylab)
    
    # set x-axis label 
    axs[2][0].set_xlabel(xlab)   
    
    # set title and save
    fig.tight_layout()
    fig.suptitle(title)
    fig.subplots_adjust(top=0.90)

    plt.savefig(out, dpi=300, format='pdf')
    

    # flag to visualize the merged distribution plots in another output file
    if dist:
        
        fig1 = plt.figure(figsize=(7,7))
        axs_d = fig1.add_subplot(111)
        
        sns.distplot(data["Upper_Leaflet"],
                     bins=20,
                     vertical=False, 
                     kde=True,color=palette[0],
                     hist=True, 
                     kde_kws={"shade": True},
                     hist_kws={"histtype":"step"},
                     label="Upper Leaflet")
        
        sns.distplot(data["Lower_Leaflet"],
                     bins=20, 
                     vertical=False, 
                     kde=True, 
                     color=palette[1],
                     hist=True, 
                     kde_kws={"shade": True},
                     hist_kws={"histtype":"step"},
                     label="Lower Leaflet")
        
        sns.distplot(data["Membrane"],
                     bins=20,
                     vertical=False,
                     kde=True,
                     color=palette[2],
                     hist=True,
                     kde_kws={"shade": True},
                     hist_kws={"histtype":"step"},
                     label="Membrane")

        # set x-axis label
        axs_d.set_xlabel(ylab)
        # set legend
        axs_d.legend()
        
        # set title and save
        fig1.tight_layout()
        fig1.suptitle("Merged distributions")
        fig1.subplots_adjust(top=0.95)
        
        plt.savefig(dist, dpi=300, format='pdf')
    

usage = ('profiler -i ["".xvg] -plot [apl/thick]' \
         ' -xlab [xlabel]' '-ylab [ylabel]' \
         '-t [Title of plot] -o ["".png/pdf] -d ["".png/pdf]')


description='This script is to plot the average values of '\
             'upper,lower leaflet and the entire membrane' \
             'along the simulation time.'\
             'The input file is an .xvg file coming from the'\
             'analysis '
                                    

parser = argparse.ArgumentParser(usage = usage,description= description)

parser.add_argument('-i',
                    '--input',
                    dest='input',
                    type=str,
                    required=True,
                    metavar='',
                    help='.xvg files ',
                    )

parser.add_argument('-plot',
                    choices=['apl','thick'],
                    required=True,
                    dest='plot')

parser.add_argument('-xlab',
                    '--xlabel',
                    dest='xlabel',
                    type=str,
                    default='Time(ns)',
                    required=False,
                    metavar='',
                    help='xlabel to assign to the plot',
                    )

parser.add_argument('-ylab',
                    '--ylabel',
                    dest='ylabel',
                    type=str,
                    required=False,
                    default=['APL $nm^2$', 'Thickness (nm)'],
                    metavar='',
                    help='ylabel to assign to the plot',
                    )

parser.add_argument('-t',
                    '--title',
                    dest='title',
                    type=str,
                    required=False,
                    default='Profiles and distributions',
                    metavar='',
                    help='Title to assign to the plot',
                    )

parser.add_argument('-out',
                    '--output',
                    dest='output',
                    type=str,
                    required=False,
                    metavar='',
                    default= 'profile.pdf',
                    help='output name of the file',
                    )

parser.add_argument('-d',
                    '--distribution-output',
                    dest='distribution',
                    type=str,
                    required=False,
                    metavar='',
                    default= 'distribution.pdf',
                    help='output name of the file',
                    )

args = parser.parse_args()

data = args.input
xlab = args.xlabel
ylab = args.ylabel
out = args.output
title = args.title
plot = args.plot
dist = args.distribution

df = pd.read_csv(data,
                 skiprows=15,
                 names = ['Time','Membrane','Lower_Leaflet','Upper_Leaflet'],
                 sep="   ")

df["Time"]=df["Time"].divide(1000)


if args.plot == 'thick':
    ylab = ylab[1]
if args.plot == 'apl':
    ylab = ylab[0]




profiler(df,
         xlab,
         ylab,
         title,
         out,dist)







