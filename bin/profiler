#!/usr/bin/env python


# Copyright (C) 2019, Simone Scrima <simonescrima@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program. If not, see <http://www.gnu.org/licenses/>.


import sys
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
import argparse
import seaborn as sns
from LipidDyn.core import *
from collections import OrderedDict
import logging
sns.set()


def dfPrep(XvgPath,
           ylab,
           ymin,
           ymax,
           th,
           plot):

    """
    Parameters
    ----------
    XvgPath : str
            Path to xvg data file 

    ylab : str  
            string containing the x axis label

    y_min : float
            float specifying the y-axis lower limit

    y_max : float
            float specifying the y-axis upper limit
    
    th: int
            
            int specifying the threshold to detect uncommon values

    unit : str
            string containing the unit measure for the legend

    plot : str 
            string defining whether thickness or apl is performed
    """

    df = pd.read_csv(XvgPath,
                     skiprows=15,
                     names = ['Time','Membrane','Lower_Leaflet','Upper_Leaflet'],
                     engine='python',
                     sep="   ")



    # convert ps to ns
    df["Time"]=df["Time"].divide(1000)

    # assign unit and y-axis label
    if args.plot == 'thickness':    
        unit = ylab[2]
        ylab = ylab[1]


    # assign unit and y-axis label
    if args.plot == 'apl':    
        unit = ylab[3]
        ylab = ylab[0]


    # detect uncommon values and remove them
    frame = df.loc[(df['Upper_Leaflet'] < th) | (df['Lower_Leaflet'] < th) | (df['Membrane'] < th)]
    df = df[(df['Upper_Leaflet'] > th) & (df['Lower_Leaflet'] > th) & (df['Membrane'] > th)]

    # check if data frame is empty 
    if df.empty == True:
        logging.error(f'Empty dataframe created: please check the threshold value, it could be too high')
        exit(1)

    # warn user if there are rows to be removed due to uncommon values
    if frame.empty == False:
        logging.warning(f'Uncommon {args.plot} values for the following frame(s) \n  {frame} \n  will be discarded')


    # set y-axis lower limit
    if ymin:
        y_min = ymin     
    else:
        y_min = (df[['Upper_Leaflet', 'Lower_Leaflet', 'Membrane']].min().min()) - 0.005

    # set y-axis upper limit
    if ymax:
        y_max = ymax
    else:
        y_max = (df[['Upper_Leaflet', 'Lower_Leaflet', 'Membrane']].max().max()) + 0.005

    return([df,
            unit,
            ylab,
            y_min,
            y_max])


def profiler(data,
             xlab,
             ylab,
             y_min,
             y_max,
             n_bins,
             unit,
             title,
             out_dir,
             out,
             dist):

    """
    Parameters
    ----------
    df : pandas dataframe
            dataframe with apl/thickness data 

    xlab : str
            string containing the x axis label

    ylab : str  
            string containing the x axis label

    y_min : float
            float specifying the y-axis lower limit

    y_max : float
            float specifying the y-axis upper limit
    
    n_bins: int
            
            int specifying the numeber of bins 

    unit : str
            string containing the unit measure for the legend

    title : str 
            string containing the title

    out : str 
            string containing the output filename
    
    dist: str
            string containing the output distribution filename
    """

    fig = plt.figure(figsize=(7,10))
   
    axs = fig.subplots(nrows=3, 
                       ncols=2,
                       gridspec_kw={'width_ratios':[4,1]}, 
                       sharey=True,
                       sharex="col")


    palette = sns.color_palette('husl', 3)
    legend = OrderedDict()



    # upper leaflet lineplot 
    up = axs[0][0].plot(data["Time"],
                        data["Upper_Leaflet"], 
                        color=palette[0],
                        linewidth=0.5)

    
    
    # upper leaflet distribution plot
    sns.distplot(data["Upper_Leaflet"],
                 bins=n_bins,
                 vertical=True,
                 ax=axs[0][1], 
                 kde=True,
                 color=palette[0], 
                 hist=True,
                 hist_kws={'range': (y_min,y_max)}
                 )
        
    
    # lower leaflet lineplot
    low = axs[1][0].plot(data["Time"],
                        data["Lower_Leaflet"], 
                        color=palette[1],
                        linewidth=0.5)
    

    # lower leaflet distribution plot
    sns.distplot(data["Lower_Leaflet"],
                 bins=n_bins,
                 vertical=True, 
                 ax=axs[1][1], 
                 kde=True,
                 color=palette[1], 
                 hist=True,
                 hist_kws={'range': (y_min,y_max)}
                 )
                 
    
    # membrane lineplot 
    memb = axs[2][0].plot(data["Time"],
                        data["Membrane"], 
                        color=palette[2],
                        linewidth=0.5)

    # membrane distribution plot
    sns.distplot(data["Membrane"],
                 bins=n_bins,               
                 vertical=True, 
                 ax=axs[2][1], 
                 kde=True,
                 color=palette[2],
                 hist=True,
                 hist_kws={'range': (y_min,y_max)}
                 )

    
       
    # set legend 
    axs[0][0].legend(up,
                    labels=('Upper Leaflet',), 
                    fontsize=7, 
                    title=f'MEAN \u00B1 SD: {round(data["Upper_Leaflet"].mean(),3)}'\
                    f'\u00B1 {round(data["Upper_Leaflet"].std(),3)}{unit}', 
                    title_fontsize=5)
    
    axs[1][0].legend(up,
                    labels=('Lower Leaflet',),
                    fontsize=7,
                    title=f'MEAN \u00B1 SD: {round(data["Lower_Leaflet"].mean(),3)}'\
                    f'\u00B1 {round(data["Lower_Leaflet"].std(),3)}{unit}',
                    title_fontsize=5)
    
    axs[2][0].legend(up,
                    labels=('Membrane',),
                    fontsize=7,
                    title=f'MEAN \u00B1 SD: {round(data["Membrane"].mean(),3)}'
                    f'\u00B1 {round(data["Membrane"].std(),3)}{unit}', 
                    title_fontsize=5)




    # set y-axis labels
    axs[0][0].set_ylabel(ylab)
    axs[1][0].set_ylabel(ylab)
    axs[2][0].set_ylabel(ylab)
    
    # set x-axis label 
    axs[2][0].set_xlabel(xlab)   
    
    # set y-axis limits
    plt.ylim(y_min, y_max)

    # set title and save
    fig.tight_layout()
    fig.suptitle(title)
    fig.subplots_adjust(top=0.90)
    plt.savefig(out_dir + out, dpi=300, format='pdf')
    


    # flag to visualize the merged distribution plots 
    if dist:
        
        fig1 = plt.figure(figsize=(7,7))
        axs_d = fig1.add_subplot(111)
        
        sns.distplot(data["Upper_Leaflet"],
                     vertical=False, 
                     kde=True,color=palette[0],
                     kde_kws={"shade": True},
                     hist=False,
                     label="Upper Leaflet")
        
        sns.distplot(data["Lower_Leaflet"],
                     vertical=False, 
                     kde=True, 
                     color=palette[1], 
                     kde_kws={"shade": True},
                     hist=False,
                     label="Lower Leaflet")
        
        sns.distplot(data["Membrane"],
                     vertical=False,
                     kde=True,
                     color=palette[2],
                     kde_kws={"shade": True},
                     hist=False,
                     label="Membrane")

        # set x-axis label
        axs_d.set_xlabel(ylab)
        
        # set legend
        axs_d.legend(['Upper Leaflet avg values', \
                      'Lower Leaflet avg values',\
                      'Membrane avg values'])
        
        # set title and save
        fig1.tight_layout()
        fig1.suptitle("Merged distributions")
        fig1.subplots_adjust(top=0.95)
        
        # set x-axis limits 
        plt.xlim(y_min,y_max)

        plt.savefig(out_dir + dist, dpi=300, format='pdf')
    

def profiler_species(data,
                     xlab,
                     ylab,
                     n_bins,
                     unit,
                     title,
                     out_dir,
                     out,
                     dist):

    """
    Parameters
    ----------
    data : pandas dataframe
            dataframe with apl/thickness data 

    xlab : str
            string containing the x axis label

    ylab : str  
            string containing the x axis label
            
    n_bins: int
            
            int specifying the numeber of bins 

    unit : str
            string containing the unit measure for the legend

    title : str 
            string containing the title

    outdir : str 
            Path for output filename
    
    out : str 
            string containing the output filename
    
    dist: str
            string containing the output distribution filename
    """

    # flag to visualize the merged distribution plots 
    if dist:
        
        fig1 = plt.figure(figsize=(7,7))
        axs_d = fig1.add_subplot(111)
        
        species_av = data.loc[:, data.columns != 'Time'].columns
        
        palette = sns.color_palette('husl', len(species_av))
        col = 0
        
        for specie_av in species_av:
        
            sns.distplot(data[specie_av],
                         vertical=False, 
                         kde=True, 
                         color=palette[col], 
                         kde_kws={"shade": True},
                         hist=False,
                         label=specie_av)
            
            col = col+1             


        # set x-axis label
        axs_d.set_xlabel(ylab)
        
        # set legend
        axs_d.legend(species_av)
        
        # set title and save
        fig1.tight_layout()
        fig1.suptitle(title)
        fig1.subplots_adjust(top=0.95)
        
        # set x-axis limits 
        y_min = (data[species_av].min().min()) - 0.005
        y_max = (data[species_av].max().max()) + 0.005
        
        plt.xlim(y_min,y_max)

        plt.savefig(out_dir + dist, dpi=300, format='pdf')


usage = ('profiler -i ["".xvg]' \
         '-plot [apl/thickness]' \
         ' -xlab [xlabel]' \
         '-ylab [ylabel]' \
         '-ymin [y minimum]' \
         '-ymax [y maximum]' \
         '-b [number of bins]' \
         '-t [Title of plot]' \
         '-th [threshold value]' \
         '-o ["".png/pdf]' \
         '-d ["".png/pdf]')


description= 'This script is to plot the average values of '\
             'upper,lower leaflet and the entire membrane'\
             'along with side distributions that can be also' \
             'plotted as merged in a single file over' \
             'the simulation time. It provides the input' \
             '.xvg file coming from the analysis'
                                    

parser = argparse.ArgumentParser(usage = usage,description= description)

parser.add_argument('-p',
                    '--Path',
                    dest='inputPath',
                    type=str,
                    required=True,
                    metavar='',
                    help='.xvg files ',
                    )

parser.add_argument('-plot',
                    choices=['apl','thickness'],
                    required=True,
                    dest='plot')

parser.add_argument('-xlab',
                    '--xlabel',
                    dest='xlabel',
                    type=str,
                    default='Time(ns)',
                    required=False,
                    metavar='',
                    help='xlabel to assign to the plot',
                    )

parser.add_argument('-ylab',
                    '--ylabel',
                    dest='ylabel',
                    type=str,
                    required=False,
                    default=['APL $nm^2$', 'Thickness (nm)', 'nm','$nm^2$'],
                    metavar='',
                    help='ylabel to assign to the plot',
                    )

parser.add_argument('-ymin',
                    '--ymin-limit',
                    dest='yminimum',
                    type=float,
                    required=False,
                    metavar='',
                    help='y-axis minimum limit to assign to the plot',
                    )

parser.add_argument('-ymax',
                    '--ymax-limit',
                    dest='ymaximum',
                    type=float,
                    required=False,
                    metavar='',
                    help='y-axis maximum limit to assign to the plot',
                    )

parser.add_argument('-b',
                    '--bins',
                    dest='bins_number',
                    type=int,
                    required=False,
                    default=30,
                    metavar='',
                    help='number of bins of the histogram',
                    )

parser.add_argument('-t',
                    '--title',
                    dest='title',
                    type=str,
                    required=False,
                    default='Profiles and distributions',
                    metavar='',
                    help='Title to assign to the plot',
                    )

parser.add_argument('-th',
                    '--threshold-value',
                    dest='threshold_value',
                    type=float,
                    required=False,
                    default=0,
                    metavar='',
                    help='Threshold to exclude uncommon thick/apl values in the plotting',
                    )

parser.add_argument('-out',
                    '--output',
                    dest='output',
                    type=str,
                    required=False,
                    metavar='',
                    default= 'profile.pdf',
                    help='output name of the file',
                    )

parser.add_argument('-og',
                    '--outputgrouped',
                    dest='out_group',
                    type=str,
                    required=False,
                    metavar='',
                    default= 'profileGrouped.pdf',
                    help='Grouped output name of the file '
                    )

parser.add_argument('-d',
                    '--distribution-output',
                    dest='distribution',
                    type=str,
                    required=False,
                    metavar='',
                    default= 'distribution.pdf',
                    help='output name of the file',
                    )
parser.add_argument('-s',
                    '--Analysis per species',
                    dest='s',
                    action='store_true',
                    help='Select to plot for each species',
                    )

args = parser.parse_args()
Path = os.path.abspath(os.path.join(args.inputPath))
xlab = args.xlabel
ylab = args.ylabel
ymin = args.yminimum
ymax = args.ymaximum
n_bins = args.bins_number
title = args.title
out_name = args.output
out_name_grouped = args.out_group
th = args.threshold_value
plot = args.plot
dist = args.distribution
species = args.s


if out_name:
    
    out_dir = str(Path + '/average/')
    
    [df,
    unit,
    y_lab,
    y_min,
    y_max] = dfPrep(out_dir + plot + '.xvg',                
                   ylab,
                   ymin,
                   ymax,
                   th,
                   plot)
           
    profiler(df,
             xlab,
             y_lab,
             y_min,
             y_max,
             n_bins,
             unit,
             title,
             out_dir,
             out_name,
             dist)
             
    if species:         
        
        for species in os.listdir('Fatslim/species'):
            out_dir = str('Fatslim/species/' + species + '/')
            
            [df,
            unit,
            y_lab,
            y_min,
            y_max] = dfPrep(out_dir + plot + '_' + species + '.xvg',                
                           ylab,
                           ymin,
                           ymax,
                           th,
                           plot)
                   
            profiler(df,
                     xlab,
                     y_lab,
                     y_min,
                     y_max,
                     n_bins,
                     unit,
                     title + ' ' + species,
                     out_dir,
                     species + '_' + out_name,
                     species + '_' + dist)
        
        
if out_name_grouped:
    profiler(df,
             xlab,
             ylab,
             y_min,
             y_max,
             n_bins,
             unit,
             title,
             out_dir,
             out_name_grouped,
             dist)
    
    if species:   
        
        df_av_combined = pd.DataFrame({})
              
        for species in os.listdir('Fatslim/species'):
            out_dir = str('Fatslim/species/' + species + '/')
            
            [df,
            unit,
            y_lab,
            y_min,
            y_max] = dfPrep(out_dir + plot + '_' + species + '.xvg',                
                           ylab,
                           ymin,
                           ymax,
                           th,
                           plot)
                   
            profiler(df,
                     xlab,
                     y_lab,
                     y_min,
                     y_max,
                     n_bins,
                     unit,
                     title + ' ' + species,
                     out_dir,
                     species + '_' + out_name,
                     species + '_' + dist)
        
            df_av_combined[species] = df['Membrane']
        
        # Species plotted together
        df_av_combined.insert(0, 'Time', df['Time'])
        
        profiler_species(df_av_combined,
                         xlab,
                         y_lab,
                         n_bins,
                         unit,
                         'Single lipid contribution to the ' + plot + ' distribution',
                         'Fatslim/',
                         'species_combined_' + out_name,
                         'species_combined_' + dist)

else:
    logging.warning("Output not selected. Please select.")
