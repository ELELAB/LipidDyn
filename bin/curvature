#!/usr/bin/env python 

# ----- Plotting Membrane Curvature Data ------

import MDAnalysis as mda
import numpy as np
from scipy import ndimage
import matplotlib.pyplot as plt
import argparse
import seaborn as sns
import matplotlib.colors


#------ Plotting Average Mean or Gaussian Curvature with Contours ------

# define function 
def plot_contours(lower_leaf,
                  upper_leaf,
                  label, 
                  level,
                  limit,
                  cmap,
                  title,
                  out):
    
    """
    Function used to plot contours of MembraneCurvature results.
    User can determine number of contour lines / regions (levels),
    label of the colorbar (label), upper and lower limit for the 
    colorbar (limit) and colormap (cmap).

    Parameters
    ----------
    lower_leaf : list 
        List with data for lower leaflet
    upper_leaf : list
        List with data for upper leaflet
    label : str
        Label to add to colorbar
    levels : int
        Determines number of contour lines
    limit : float
        Color spectrum limit to use in plot
    cmap : str
        Colormap to use in plot
    title : str
        String containing the title 
    out : str
        String containing the output filename

    """ 

    data = [lower_leaf, upper_leaf]
    
    fig, [ax1, ax2] = plt.subplots(ncols = 2, 
                                   figsize = (4, 3.5), 
                                   dpi = 200)
    
    max_ = np.nanmax(np.concatenate(data)) #overall max for both leaflets
    max_ = limit #otherwise specified max via argument 
    min_ = np.nanmin(np.concatenate(data)) #overall min for both leaflets
    
    low_max = np.nanmax(data[0]) #max for lower leaflet 
    up_min = np.nanmin(data[1]) #min for upper leaflet 

    half = (min_ + ((max_ - min_) / 2)) #halfway point between overall max and min

    for ax, rs, lf in zip((ax1, ax2), data, leaflets):
        rs = ndimage.zoom(rs, 
                          3, 
                          mode = 'wrap', 
                          order = 2)
        
        if np.min(rs) < 0 < np.max(rs):
            levs = np.linspace(-max_, max_, level)
            im = ax.contourf(rs, 
                             cmap = cmap, 
                             origin = 'lower', 
                             levels = levs, 
                             alpha = 0.95, 
                             vmin = -max_, 
                             vmax = max_)
        
            tcs = [-max_, 0, max_]
        
        else:
            levs = np.linspace(min_, max_, level)
            im = ax.contourf(rs, 
                             cmap = cmap, 
                             origin = 'lower', 
                             levels = levs, 
                             alpha = 0.95, 
                             vmin = min_, 
                             vmax = max_)
            
            tcs = [min_, low_max, half, up_min, max_]

        ax.set_aspect('equal')
        ax.set_title('{} Leaflet'.format(lf), fontsize = 6)
        ax.axis('off')

        fig.subplots_adjust(right = 0.8)
        cbar_ax = fig.add_axes([0.83, 0.32, 0.02, 0.35])
        cbar = fig.colorbar(im, cax = cbar_ax, ticks = tcs) 
        #cbar = plt.colorbar(im, 
        #                    ticks = tcs, 
        #                    orientation ='horizontal', 
        #                    ax = ax, 
        #                    shrink = 0.7, 
        #                    aspect = 10, 
        #                    pad = 0.05)
        cbar.ax.tick_params(labelsize = 5, width = 0.5)
        cbar.set_label(label, fontsize = 5, labelpad = 5)
    
    fig.suptitle(title, y = 0.85)
    #plt.tight_layout()
    plt.savefig(out, dpi = 300)


usage = ('curvature -u [.dat] -l [.dat] -c [colormap] -t [Title of the plot]' \
          '-plot[mean/gaussian/basic/smooth] -level [int] -lim [float] -o ["".png/pdf]')

description= 'This script is to plot the membrane curvature and surface' \
              'maps of the lipids composing the leaflets in the box.'\
              'The input file is an .dat file coming from the analysis'
                                    

parser = argparse.ArgumentParser(usage = usage, description= description)


parser.add_argument('-u',
                    '--upper',
                    dest='upper',
                    type=str,
                    required=True,
                    metavar='',
                    help='upper leaflet input file'
                    )

parser.add_argument('-l',
                    '--lower',
                    dest='lower',
                    type=str,
                    required=True,
                    metavar='',
                    help='lower leaflet input file'
                    )

parser.add_argument('-plot',
                    choices=['mean','gaussian','basic','smooth','smoot'],
                    required=True,
                    dest='plot',
                    help='Specify the type of plot')

parser.add_argument('-level',
                    nargs='?',
                    default=50,
                    type=int,
                    dest='level',
                    help='Specify on how many contour lines to use for \
                          plotting'
                   )

parser.add_argument('-lim',
                    '--spectrum-limit',
                    dest='speclim',
                    type=float,
                    required=False,
                    metavar='',
                    help='Specify spectrum limit to assign to the plot',
                    )


parser.add_argument('-c', 
                    '--colormap',
                     dest='cmap',
                     default='Spectral_r',
                     type=str,
                     metavar='',
                     help='Range of colors used in the plot.'
                     )

parser.add_argument('-t',
                    '--title',
                    dest='title',
                    type=str,
                    required=False,
                    default='2D Membrane Curvature Map',
                    metavar='',
                    help='Title to assign to the plot',
                    )

parser.add_argument('-o',
                    '--output',
                    dest='output',
                    type=str,
                    required=False,
                    metavar='',
                    default= 'curvature.pdf',
                    help='output name of the file',
                    )


args = parser.parse_args()
lower_leaflet = args.lower
upper_leaflet = args.upper
out = args.output
level = args.level
lim = args.speclim
title = args.title
plot = args.plot
cmap = args.cmap

leaflets = ["Lower", "Upper"]

lower_leaf = np.loadtxt(lower_leaflet)
upper_leaf = np.loadtxt(upper_leaflet)
leafs = [lower_leaf,  
         upper_leaf] 
concat_leafs = np.concatenate(leafs) #new  

# assign mean label
if args.plot == 'mean':    
    label = '$H$ ($\AA^{-1}$)'
    title = 'Mean Curvature Plots'

# assign gaussian label
if args.plot == 'gaussian':    
    label = '$K$ ($\AA^{-2}$)'
    title = 'Gaussian Curvature Plots'

if args.plot == 'smoot': #temporary
    label = 'Height lipid headgroups (${\AA}$)'
    title = 'Smooth Plots of Surface' 

# set limit
if lim:
    limit = lim
else:
    limit = np.nanmax(abs(concat_leafs)) #changed from np.max(abs(upper_leaf))     


#------ in case of plotting surface ---------
leafs_max = np.nanmax(concat_leafs) #overall max for both leaflets  
leafs_min = np.nanmin(concat_leafs) #overall min for both leaflets

low_max = np.nanmax(leafs[0]) #max for lower leaflet
up_min = np.nanmin(leafs[1]) #min for upper leaflet

half = (leafs_min + ((leafs_max - leafs_min) / 2)) #halfway point between overall max and min

# basic plot
if args.plot == 'basic':
    fig, [ax1, ax2] = plt.subplots(ncols = 2, 
                                   figsize = (4,2), 
                                   dpi = 200)
    
    for ax, surfs, lf in zip((ax1, ax2), leafs, leaflets):
        im = ax.imshow(surfs, 
                       cmap = 'Spectral_r', 
                       origin = 'lower', 
                       vmin = leafs_min, 
                       vmax = leafs_max)
        tcs = [leafs_min, low_max, half, up_min, leafs_max] 
        ax.set_aspect('equal')
        ax.set_title('{} Leaflet'.format(lf), fontsize = 6)
        ax.axis('off')

    fig.subplots_adjust(right = 0.8)
    cbar_ax = fig.add_axes([0.85, 0.2, 0.02, 0.6])
    cbar = fig.colorbar(im, cax = cbar_ax, ticks = tcs)
    cbar.ax.tick_params(labelsize = 5, width = 0.5)
    cbar.set_label("Height lipid headgroups (${\AA}$)", fontsize = 6, labelpad = 5)

    fig.suptitle("Basic Surface Plots", size = 'small')
    fig.savefig(out, dpi = 300)

    exit()

# smooth plot
if args.plot == 'smooth':
    fig, [ax1, ax2] = plt.subplots(ncols = 2, 
                                   figsize = (4,2), 
                                   dpi = 200)
    
    for ax, surfs, lf in zip((ax1, ax2), leafs, leaflets):
        im = ax.imshow(surfs, 
                       interpolation = 'gaussian', 
                       cmap = 'Spectral_r', 
                       origin = 'lower', 
                       vmin = leafs_min, 
                       vmax = leafs_max)
        tcs = [leafs_min, low_max, half, up_min, leafs_max]
        ax.set_aspect('equal')
        ax.set_title('{} Leaflet'.format(lf), fontsize = 6)
        ax.axis('off')
    
    fig.subplots_adjust(right = 0.8)
    cbar_ax = fig.add_axes([0.85, 0.2, 0.02, 0.6])
    cbar = fig.colorbar(im, cax = cbar_ax, ticks = tcs)
    cbar.ax.tick_params(labelsize = 5, width = 0.5)
    cbar.set_label("Height lipid headgroups (${\AA}$)", fontsize = 6, labelpad = 5)

    fig.suptitle("Smooth Surface Plots", size = 'small')
   #fig.suptitle(title, size = 'small') #if the user wants to specify a title, this works...
    fig.savefig(out, dpi = 300)

    exit()

#----- in case of plotting membrance curvature -------
plot_contours(lower_leaf, 
              upper_leaf, 
              label, 
              level, 
              limit, 
              cmap, 
              title, 
              out)
