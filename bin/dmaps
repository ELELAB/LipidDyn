#!/usr/bin/env python


# Copyright (C) 2019, Simone Scrima <simonescrima@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program. If not, see <http://www.gnu.org/licenses/>.


import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import argparse
from collections import OrderedDict
import seaborn as sns
from LipidDyn.core import *


def plotting(array,
             enrichment,
             cmap,
             title,
             min_d,
             max_d,
             tick_range,
             out):
    
    """
    Parameters
    ----------
    array : numpy array of values
            dictionary of lipid residues and their coordinates
    enrichment : Bool
            Boolean flag to indicate if it is enrichment analysis
    cmap : str
            colormap to use in the plot
    
    min_d:  float to define the lower limit density value

    max_d:  float to define the upper limit density value

    tick_range: int to define the range of ticks to plot 

    title : str 
            string containing the title
    out : str 
            string containing the output filename
    """


    fig, ax = plt.subplots()
    
    # create a dataframe from the array
    data=pd.DataFrame(array)
    
    # get the first column and row
    col=list(data.iloc[:,0])
    row=list(data.iloc[0,:])

    # convert df into array
    array=data.to_numpy()

    # exclude the first zeros positions
    xticks=row[1:]
    yticks=col[1:]
    
    
    if enrichment:

        sns_plot=plt.imshow(np.rot90(array),
                            cmap=cmap,
                            vmax=1,
                            vmin=0,
                            origin='lower',
                            extent=[min(xticks),max(xticks),max(yticks), min(yticks)],
                            interpolation='nearest')   
    else:
        # heatmap rotate the final plot of 90 degree 
        # set the origin in lower left corner
        # revert yticks order from max to min 
        sns_plot=plt.imshow(np.rot90(array),
                            cmap=cmap,
                            vmax=max_d,
                            vmin=min_d,
                            origin='lower',
                            extent=[min(xticks),max(xticks),max(yticks), min(yticks)],
                            interpolation='nearest')

    
    # invert y-axis  
    ax.invert_yaxis()
    

    # set  ticks for x-axis  
    x_pos=[]
    for tick in range(0,len(xticks), tick_range):
        x_pos.append(xticks[tick])
    
    # include the last tick to plot the limit 
    for tick in range(len(xticks)):
        
        if tick == (len(xticks)-1):
            x_pos.append(xticks[tick])

    
    plt.xticks(x_pos, fontsize=4, rotation=45)

    # set ticks for y-axis 
    y_pos=[]
    for tick in range(0,len(yticks),tick_range):
        
        y_pos.append(yticks[tick])
    # include the last tick to plot the limit 
    for tick in range(len(yticks)):

        if tick == (len(yticks)-1):

            y_pos.append(yticks[tick])

    plt.yticks(y_pos, fontsize=4)    
 
    # set the color bar 
    cbar=plt.colorbar()
    cbar.set_label('$nm^-3$')
    ax.set(xlabel='x(nm)', ylabel='y(nm)')
    plt.title(title)
    plt.tight_layout()
    plt.savefig(out, dpi= 300)
    




usage = ('dmaps -i [.dat] -c [colormap] -t [Title of the plot] \
            -min [float] -max[float] -out ["".png/pdf]' \
            ' -enr [True/False]')

description='This script is to plot the density maps of' \
             'the lipids composing the  leaflet in the box.'\
             'The input file is an .dat file coming from the'\
             'analysis '
                                    

parser = argparse.ArgumentParser(usage = usage,description= description)


parser.add_argument('-i',
                    '--input',
                    dest='input',
                    type=str,
                    required=True,
                    metavar='',
                    help='input file'
                    )

parser.add_argument('-c', 
                    '--colormap',
                     dest='cmap',
                     default='seismic',
                     type=str,
                     metavar='',
                     help='Range of colors used in the plot.'
                     )

parser.add_argument('-t',
                    '--title',
                    dest='title',
                    type=str,
                    required=False,
                    default='2D density map',
                    metavar='',
                    help='Title to assign to the plot',
                    )

parser.add_argument('-min',
                    '--minimum-density',
                    dest='minimum_density',
                    type=float,
                    required=False,
                    metavar='',
                    help='Minimum value of density in the plotting',
                    )

parser.add_argument('-r',
                    '--range-ticks',
                    dest='range_ticks',
                    type=int,
                    required=False,
                    default = 40,
                    metavar='',
                    help='Value to define the interval of tick positions in the plot',
                    )

parser.add_argument('-max',
                    '--maximum-density',
                    dest='maximum_density',
                    type=float,
                    required=False,
                    metavar='',
                    help='Maximum value of density in the plotting',
                    )


parser.add_argument('-out',
                    '--output',
                    dest='output',
                    type=str,
                    required=False,
                    metavar='',
                    default= '2Dmaps.pdf',
                    help='output name of the file',
                    )

parser.add_argument('-enr',
                    '--enrichment',
                    action='store_true',
                    dest='enr', 
                    required = False,
                    help='if the plot is an enrichment plot or \
                          not'
                    )


args = parser.parse_args()
dat = args.input
out = args.output
title = args.title
min_dens=args.minimum_density
max_dens=args.maximum_density
tick_range=args.range_ticks
cmap= args.cmap
enr = args.enr
array = np.loadtxt(dat)

# set min and max density range to plot
if min_dens:
    min_d=min_dens
else:
    min_d=array.min()

if max_dens:
    max_d=max_dens
else:
    max_d=array.max() 


plotting(array,enr,cmap,title,min_d,max_d,tick_range,out)



