#!/usr/bin/env python


# Copyright (C) 2019, Simone Scrima <simonescrima@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program. If not, see <http://www.gnu.org/licenses/>.


import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import argparse
from collections import OrderedDict
import seaborn as sns
from LipidDyn.core import *


def plotting(array,
             enrichment,
             cmap,
             title,
             min_d,
             max_d,
             out):
    
    """
    Parameters
    ----------
    array : numpy array of values
            dictionary of lipid residues and their coordinates
    enrichment : Bool
            Boolean flag to indicate if it is enrichment analysis
    cmap : str
            colormap to use in the plot
    title : str 
            string containing the title
    out : str 
            string containing the output filename
    """


    fig, ax = plt.subplots()
    
    if enrichment:
        sns_plot = sns.heatmap(np.rot90(array),
                           linewidths=0.0,
                           rasterized=True,
                           cmap = cmap ,
                           cbar_kws={'label': '$nm^-3$'},
                           vmax=1,
                           vmin=0)
    else:
        # heatmap rotate the final plot of 90 degree so
        # we adjust it
        sns_plot = sns.heatmap(np.rot90(array),
                           linewidths=0.0,
                           rasterized=True,
                           cmap = cmap ,
                           cbar_kws={'label': '$nm^-3$'},
                           vmax=max_d,
                           vmin=min_d)

    # get the xtick in int and store in a list
    xtick_list = list(map(int, ax.get_xticks().tolist()))

    for ind, label in enumerate(xtick_list):
        if label >= 0 and label <= len(array[:,0]):
            # get the label from the array
            xtick_list[ind] = round(array[0][label],2)
    # plot the new labels        
    sns_plot.set_xticklabels(xtick_list) 

    # Hide some label to avoid a messy plot
    for ind, label in enumerate(sns_plot.get_xticklabels()):
        if ind % 4 == 0:  
            label.set_visible(True)
        else:
            label.set_visible(False)
    
    # Repeat for the ylabels
    ytick_list = list(map(int, ax.get_yticks().tolist()))

    for ind, label in enumerate(ytick_list):
        if label >= 0 and label <= len(array[0,:]):
            # get the corrisponding label from the array
            ytick_list[ind] = round(array[label][0],2)
    # plot the new labels and revert them    
    sns_plot.set_yticklabels(ytick_list[::-1])

    # Hide some label to avoid a messy plot
    for ind, label in enumerate(sns_plot.get_yticklabels()):
        if ind % 4 == 0:  
            label.set_visible(True)
        else:
            label.set_visible(False)
    

    # Set x and y label
    ax.set(xlabel='x(nm)', ylabel='y(nm)')
    plt.title(title)
    plt.tight_layout()
    plt.savefig(out, dpi= 300)
    




usage = ('dmaps -i [.dat] -c [colormap] -t [Title of the plot] \
            -min [float] -max[float] -out ["".png/pdf]' \
            ' -enr [True/False]')

description='This script is to plot the density maps of' \
             'the lipids composing the  leaflet in the box.'\
             'The input file is an .dat file coming from the'\
             'analysis '
                                    

parser = argparse.ArgumentParser(usage = usage,description= description)


parser.add_argument('-i',
                    '--input',
                    dest='input',
                    type=str,
                    required=True,
                    metavar='',
                    help='input file'
                    )

parser.add_argument('-c', 
                    '--colormap',
                     dest='cmap',
                     default='seismic',
                     type=str,
                     metavar='',
                     help='Range of colors used in the plot.'
                     )

parser.add_argument('-t',
                    '--title',
                    dest='title',
                    type=str,
                    required=False,
                    default='2D density map',
                    metavar='',
                    help='Title to assign to the plot',
                    )

parser.add_argument('-min',
                    '--minimum-density',
                    dest='minimum_density',
                    type=float,
                    required=False,
                    metavar='',
                    help='Minimum value of density in the plotting',
                    )

parser.add_argument('-max',
                    '--maximum-density',
                    dest='maximum_density',
                    type=float,
                    required=False,
                    metavar='',
                    help='Maximum value of density in the plotting',
                    )


parser.add_argument('-out',
                    '--output',
                    dest='output',
                    type=str,
                    required=False,
                    metavar='',
                    default= '2Dmaps.pdf',
                    help='output name of the file',
                    )

parser.add_argument('-enr',
                    '--enrichment',
                    action='store_true',
                    dest='enr', 
                    required = False,
                    help='if the plot is an enrichment plot or \
                          not'
                    )


args = parser.parse_args()
dat = args.input
out = args.output
title = args.title
min_dens=args.minimum_density
max_dens=args.maximum_density
cmap= args.cmap
enr = args.enr
array = np.loadtxt(dat)

# set min and max density range to plot
if min_dens:
    min_d=min_dens
else:
    min_d=array.min()

if max_dens:
    max_d=max_dens
else:
    max_d=array.max() 


plotting(array,enr,cmap,title,min_d,max_d,out)
