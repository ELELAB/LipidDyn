#!/usr/bin/env python3


# Copyright (C) 2019, Simone Scrima <simonescrima@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program. If not, see <http://www.gnu.org/licenses/>.

# coding: utf-8

# import packages
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from mpl_toolkits.mplot3d import Axes3D
import argparse
from collections import OrderedDict
import seaborn as sns
from LipidDyn.core import *
from scipy.ndimage.filters import gaussian_filter


def plotting(array,
             enrichment,
             cmap,
             title,
             out):
    
    """
    Parameters
    ----------
    array : numpy array of values
            dictionary of lipid residues and their coordinates
    enrichment : Bool
            Boolean flag to indicate if it is enrichment analysis
    cmap : str
            colormap to use in the plot
    title : str 
            string containing the title
    out : str 
            string containing the output filename
    """


    fig = plt.figure()
    ax = fig.add_subplot(111)
    
    if enrichment:
        #array_smooth = gaussian_filter(array, sigma=1)
        sns_plot = sns.heatmap(array,
                           cmap = cmap ,
                           cbar_kws={'label': '$nm^3$'},
                           vmax = 1,vmin=0)
    else:
        #array_smooth = gaussian_filter(array, sigma=1)
        sns_plot = sns.heatmap(array,
                           cmap = cmap ,
                           cbar_kws={'label': '$nm^3$'})
   
    xtick_list = list(map(int, ax.get_xticks().tolist()))
    for itick, xtick in enumerate(xtick_list[:]):
        if xtick >= 0 and xtick <= len(array[0]):
            xtick_list[itick] = round(array[0][xtick],2)
    sns_plot.set_xticklabels(xtick_list)
    for ind, label in enumerate(sns_plot.get_xticklabels()):
        if ind % 4 == 0:  # every 10th label is kept
            label.set_visible(True)
        else:
            label.set_visible(False)

    sns_plot.set_yticklabels(xtick_list[::-1])
    for ind, label in enumerate(sns_plot.get_yticklabels()):
        if ind % 4 == 0:  # every 10th label is kept
            label.set_visible(True)
        else:
            label.set_visible(False)
   

    plt.title(title)
    plt.savefig(out,dpi= 300)
    




usage = ('dmaps -i [.dat] -c [colormap] -t [Title of the plot] -out ["".png/pdf]' \
         ' -enr [True/False]')

description='This script is to plot the diffusion movements of' \
             'the lipids composing the  leaflet in the box.'\
             'The input file is an .dat file coming from the'\
             'analysis '
                                    

parser = argparse.ArgumentParser(usage = usage,description= description)


parser.add_argument('-i',
                    '--input',
                    dest='input',
                    type=str,
                    required=True,
                    metavar='',
                    help='input file'
                    )

parser.add_argument('-c', 
                    '--colormap',
                     dest='cmap',
                     default='seismic',
                     type=str,
                     metavar='',
                     help='Range of colors used in the plot.'
                     )

parser.add_argument('-t',
                    '--title',
                    dest='title',
                    type=str,
                    required=False,
                    default='2D density map',
                    metavar='',
                    help='Title to assign to the plot',
                    )

parser.add_argument('-out',
                    '--output',
                    dest='output',
                    type=str,
                    required=False,
                    metavar='',
                    default= '2Dmaps.pdf',
                    help='output name of the file',
                    )

parser.add_argument('-enr',
                    '--enrichment',
                    action='store_true',
                    dest='enr', 
                    required = False,
                    help='if the plot is an enrichment plot or \
                          not'
                    )


args = parser.parse_args()
dat = args.input
out = args.output
title = args.title
cmap= args.cmap
enr = args.enr
array = np.loadtxt(dat)

plotting(array,enr,cmap,title,out)
