#!/usr/bin/env python


# Copyright (C) 2019, Simone Scrima <simonescrima@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program. If not, see <http://www.gnu.org/licenses/>.


import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import argparse
from collections import OrderedDict
import seaborn as sns
from LipidDyn.core import *
import matplotlib as mpl
import matplotlib.colors as colors

def plotting(data,
             enrichment,
             cmap,
             title,
             min_dens,
             max_dens,
             xticks,
             yticks,
             ticks_num,
             out):
    
    """
    Parameters
    ----------
    array : numpy array of values
            dictionary of lipid residues and their coordinates
    enrichment : Bool
            Boolean flag to indicate if it is enrichment analysis
    cmap : str
            colormap to use in the plot
    title : str 
            string containing the title
    
    min_dens:  float to define the lower limit density value

    max_dens:  float to define the upper limit density value

    xticks: int to define the number of x-axis ticks to plot
    
    yticks: int to define the number of y-axis ticks to plot
    
    tick_num: int to define the number of ticks for xy-axis         
    
    out : str 
            string containing the output filename
    """


    fig, ax = plt.subplots()

    # get the min max density limits to plot 
    if min_dens is not None:
        
        min_d = min_dens
    
    else:
        
        min_d = data.min()
        

    if max_dens is not None:
       
        max_d = max_dens
    
    else:
        
        max_d = data.max() 

    

    if enrichment:
        
        plot = plt.imshow(data,
                          cmap=cmap,
                          origin='lower',
                          vmin=min_d,
                          vmax=max_d,
                          extent=[xticks[0],xticks[-1],yticks[0], yticks[-1]])
                             
    else:
        
        plot = plt.imshow(data,
                          cmap=cmap,
                          vmin=min_d,
                          vmax=max_d,
                          origin='lower',
                          extent=[xticks[0],xticks[-1],yticks[0], yticks[-1]])

    

    # set  ticks for x-axis  
    x_pos = np.linspace(0, xticks.max(), num=ticks_num)
    
    plt.xticks(x_pos, fontsize=6, rotation=45)
    
    # set ticks for y-axis 
    y_pos = np.linspace(0, yticks.max(), num=ticks_num)
    
    plt.yticks(y_pos, fontsize=6)    
 
    # set the color bar 
    cbar = plt.colorbar()
    # set color bar label
    cbar.set_label('$nm^{-3}$')
    # set axis labels and title
    ax.set(xlabel='x(nm)', ylabel='y(nm)')   
    plt.title(title)
    
    plt.tight_layout()
    plt.savefig(out, dpi= 300)
    




usage = ('dmaps -i [.dat] -c [colormap] -t [Title of the plot]' \
          '-min [float] -max[float] -n [int]' \
          '-out ["".png/pdf] -enr [True/False]')

description ='This script is to plot the density maps of' \
             'the lipids composing the  leaflet in the box.'\
             'The input file is an .dat file coming from the'\
             'analysis '
                                    

parser = argparse.ArgumentParser(usage = usage,description= description)


parser.add_argument('-i',
                    '--input',
                    dest='input',
                    type=str,
                    required=True,
                    metavar='',
                    help='input file'
                    )

parser.add_argument('-c', 
                    '--colormap',
                     dest='cmap',
                     default='seismic',
                     type=str,
                     metavar='',
                     help='Range of colors used in the plot.'
                     )

parser.add_argument('-t',
                    '--title',
                    dest='title',
                    type=str,
                    required=False,
                    default='2D density map',
                    metavar='',
                    help='Title to assign to the plot',
                    )

parser.add_argument('-min',
                    '--minimum-density',
                    dest='minimum_density',
                    type=float,
                    required=False,
                    metavar='',
                    help='Minimum value of density in the plotting',
                    )

parser.add_argument('-n',
                    '--ticks-number',
                    dest='ticks_number',
                    type=int,
                    required=False,
                    default = 10,
                    metavar='',
                    help='Define the number of xy-axis ticks',
                    )

parser.add_argument('-max',
                    '--maximum-density',
                    dest='maximum_density',
                    type=float,
                    required=False,
                    metavar='',
                    help='Maximum value of density to plot',
                    )


parser.add_argument('-out',
                    '--output',
                    dest='output',
                    type=str,
                    required=False,
                    metavar='',
                    default= '2Dmaps.pdf',
                    help='output name of the file',
                    )

parser.add_argument('-enr',
                    '--enrichment',
                    action='store_true',
                    dest='enr', 
                    required = False,
                    help='if the plot is an enrichment plot or \
                          not'
                    )


args = parser.parse_args()
dat = args.input
out = args.output
title = args.title
min_dens = args.minimum_density
max_dens = args.maximum_density
ticks_num = args.ticks_number
cmap = args.cmap
enr = args.enr
array = np.loadtxt(dat, dtype=float)

# get the axis ticks and get the array with density values only 
xticks = array[0,1:]
yticks = array[1:,0]
data = array[1:,1:]
plotting(data,enr,cmap,title,min_dens,max_dens,xticks,yticks,ticks_num,out)



